buildscript {
    ext {
        kotlinVersion = '1.2.30'
        springBootVersion = '1.5.10.RELEASE'
        dokka_version = '0.9.15'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {

        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'jacoco'

group = 'com.nuc'

version = '1.2.0.' + getDate()

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    jcenter()
    mavenCentral()

}


dependencies {
    // jpa
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    //jdbc
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    // web
    compile('org.springframework.boot:spring-boot-starter-web')
    // kotlin
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    // mysql链接
    runtime('mysql:mysql-connector-java')
    // swagger 2
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.8.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.8.0'
    //jwt
    compile 'io.jsonwebtoken:jjwt:0.9.0'
    // fastjson
    compile('com.alibaba:fastjson:1.2.46')
    // mq
    compile('org.springframework.boot:spring-boot-starter-amqp')
    // word 分词，词频
    compile group: 'org.apdplat', name: 'word', version: '1.3'
    // sentry 日志监控
    compile 'io.sentry:sentry-spring:1.6.8'
    compile group: 'com.getsentry.raven', name: 'raven-logback', version: '8.0.3'
    // Kotlin-Reflect-Tools-For-JVM
    compile 'wu.seal:kotlin-reflect-tools-for-jvm:1.1.2'
    // 缓存
    compile 'org.springframework.boot:spring-boot-starter-redis'
    // test
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format("yyMMddHH")
    return formattedDate
}

task codeCoverageReport(type: JacocoReport) {
    classDirectories = files('build/classes')
    sourceDirectories = files('src/main/kotlin')

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

check.dependsOn codeCoverageReport